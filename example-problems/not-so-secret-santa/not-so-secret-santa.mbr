include "defs.mbr";

PVS: august = new ConstraintPreferences("august") {
  soft-constraint augustToMaria : 'givesTo[AUGUST] = MARIA';
  soft-constraint augustFood : 'FOOD in tagged[givesTo[AUGUST]]';
  soft-constraint augustClumsy : 'not(HOMEMADE in tagged[givesTo[AUGUST]])';
  
  crEdges : '[| mbr.augustClumsy, mbr.augustToMaria | mbr.augustFood, mbr.augustToMaria |]';
  useSPD: 'false' ;
};

PVS: hans = new WeightedCsp("hans") {
  soft-constraint hansFood : 'FOOD in tagged[givesTo[HANS]]' :: weights('10');
  soft-constraint hansHermannBrothers : 'not(givesTo[HANS] = HERMANN)' :: weights('5');
};

PVS: hermann = new MaxCsp("hermann") {
  soft-constraint hermannActive : 'ACTIVE in tagged[givesTo[HERMANN]]';
  soft-constraint hermannHomemade : 'HOMEMADE in tagged[givesTo[HERMANN]]';
};

PVS: maria = new ConstraintPreferences("maria") {
  soft-constraint mariaToAugust : 'givesTo[MARIA] = AUGUST';
  soft-constraint mariaCoupon : 'COUPON in tagged[givesTo[MARIA]]';
  soft-constraint mariaHandy : 'HOMEMADE in tagged[givesTo[MARIA]]';
  
  crEdges : '[| mbr.mariaToAugust, mbr.mariaHandy | mbr.mariaToAugust, mbr.mariaCoupon |]';
  useSPD: 'false' ;
};

PVS: franziska = new MaxCsp("franziska") {
  soft-constraint franziskaGetsHomeMade : 'HOMEMADE in tagged[getsFrom[FRANZISKA]]';
  soft-constraint franziskaGivesHomemade : 'HOMEMADE in tagged[givesTo[FRANZISKA]]';
};

output '["givesTo = \(givesTo);"]' ;

solve vote([august,hans,hermann,maria,franziska], majorityTops);
