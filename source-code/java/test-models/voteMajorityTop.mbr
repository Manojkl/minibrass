
% This model represents a simple instance of majority tops voting
% where we just aim at maximizing the number of agents that 
% get their top value

% For instance, the profile
% 3 | 2 | 2
% 1 | 1 | 3
% 2 | 3 | 1
% leads to 2 being chosen as two agents like it best
 
type PvsRel = PVSType<1..k> = 
  params {
    int: k :: default('1000'); % just some upper bound on integer values 
    int: topVal :: default('1');
    array [int,1..2] of 1..k: tuples;
  } in  
  instantiates with "soft_constraints/mbr_types/relation-type.mzn" {
    times -> max;
    is_worse -> is_worse_relation; 
    top -> mbr.topVal; 
 };
 
PVS: agent1 = new PvsRel("agent1") {
  soft-constraint c1: 'a';
  tuples: '[| 1, 3 | 2, 3 | 2, 1 |]';
  k : '3';
  topVal: '3';
};

PVS: agent2 = new PvsRel("agent2") {
  soft-constraint c1: 'a';
  tuples: '[| 3, 1 | 3, 2 | 1, 2 |]';
  k : '3';
  topVal: '2';
};

PVS: agent3 = new PvsRel("agent3") {
  soft-constraint c1: 'a';
  tuples: '[| 3, 2 | 1, 3 | 1, 2 |]';
  k : '3';
  topVal: '2'; 
};


solve vote([agent1,agent2,agent3], majorityTops);
