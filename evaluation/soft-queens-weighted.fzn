predicate jacop_alldiff(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_38 = [1,-1];
var 1..8: X_INTRODUCED_0;
var 1..8: X_INTRODUCED_1;
var 1..8: X_INTRODUCED_2;
var 1..8: X_INTRODUCED_3;
var 1..8: X_INTRODUCED_4;
var 1..8: X_INTRODUCED_5;
var 1..8: X_INTRODUCED_6;
var 1..8: X_INTRODUCED_7;
var bool: X_INTRODUCED_8:: is_defined_var;
var bool: X_INTRODUCED_9:: is_defined_var;
var bool: X_INTRODUCED_10:: is_defined_var;
var 0..1: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var 2..9: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 3..10: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var 4..11: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var 5..12: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var 6..13: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var 7..14: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var 8..15: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 9..16: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var 0..7: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var -1..6: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var -2..5: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var -3..4: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var -4..3: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var -5..2: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var -6..1: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var -7..0: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
array [1..8] of var int: queens:: output_array([1..8]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7];
array [1..3] of var bool: satisfied:: output_array([1..3]) = [X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10];
array [1..8] of var int: X_INTRODUCED_26 ::var_is_introduced  = [X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25];
array [1..8] of var int: X_INTRODUCED_35 ::var_is_introduced  = [X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32,X_INTRODUCED_33,X_INTRODUCED_34];
constraint jacop_alldiff(queens);
constraint jacop_alldiff(X_INTRODUCED_26);
constraint jacop_alldiff(X_INTRODUCED_35);
constraint int_eq_reif(X_INTRODUCED_3,4,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_lin_eq_reif(X_INTRODUCED_38,[X_INTRODUCED_1,X_INTRODUCED_0],2,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_lin_eq_reif(X_INTRODUCED_38,[X_INTRODUCED_2,X_INTRODUCED_1],2,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint bool2int(X_INTRODUCED_8,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint bool2int(X_INTRODUCED_9,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint bool2int(X_INTRODUCED_10,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_lin_eq([2,1,1,-1],[X_INTRODUCED_11,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16],0):: defines_var(X_INTRODUCED_16);
constraint int_lin_eq([1,-1],[X_INTRODUCED_0,X_INTRODUCED_18],-1):: defines_var(X_INTRODUCED_18);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1,X_INTRODUCED_19],-2):: defines_var(X_INTRODUCED_19);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2,X_INTRODUCED_20],-3):: defines_var(X_INTRODUCED_20);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3,X_INTRODUCED_21],-4):: defines_var(X_INTRODUCED_21);
constraint int_lin_eq([1,-1],[X_INTRODUCED_4,X_INTRODUCED_22],-5):: defines_var(X_INTRODUCED_22);
constraint int_lin_eq([1,-1],[X_INTRODUCED_5,X_INTRODUCED_23],-6):: defines_var(X_INTRODUCED_23);
constraint int_lin_eq([1,-1],[X_INTRODUCED_6,X_INTRODUCED_24],-7):: defines_var(X_INTRODUCED_24);
constraint int_lin_eq([1,-1],[X_INTRODUCED_7,X_INTRODUCED_25],-8):: defines_var(X_INTRODUCED_25);
constraint int_lin_eq([1,-1],[X_INTRODUCED_0,X_INTRODUCED_27],1):: defines_var(X_INTRODUCED_27);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1,X_INTRODUCED_28],2):: defines_var(X_INTRODUCED_28);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2,X_INTRODUCED_29],3):: defines_var(X_INTRODUCED_29);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3,X_INTRODUCED_30],4):: defines_var(X_INTRODUCED_30);
constraint int_lin_eq([1,-1],[X_INTRODUCED_4,X_INTRODUCED_31],5):: defines_var(X_INTRODUCED_31);
constraint int_lin_eq([1,-1],[X_INTRODUCED_5,X_INTRODUCED_32],6):: defines_var(X_INTRODUCED_32);
constraint int_lin_eq([1,-1],[X_INTRODUCED_6,X_INTRODUCED_33],7):: defines_var(X_INTRODUCED_33);
constraint int_lin_eq([1,-1],[X_INTRODUCED_7,X_INTRODUCED_34],8):: defines_var(X_INTRODUCED_34);
solve :: seq_search([int_search([X_INTRODUCED_11,X_INTRODUCED_14,X_INTRODUCED_15],input_order,indomain_max,complete),int_search(queens,first_fail,indomain_median,complete)]) maximize X_INTRODUCED_16;
